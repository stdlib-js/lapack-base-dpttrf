{
  "version": 3,
  "sources": ["../lib/base.js", "../lib/dpttrf.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the `L * D * L^T` factorization of a real symmetric positive definite tridiagonal matrix `A`.\n*\n* @private\n* @param {NonNegativeInteger} N - order of matrix `A`\n* @param {Float64Array} D - the `N` diagonal elements of `A`\n* @param {integer} strideD - stride length for `D`\n* @param {NonNegativeInteger} offsetD - starting index of `D`\n* @param {Float64Array} E - the `N-1` subdiagonal elements of `A`\n* @param {integer} strideE - stride length for `E`\n* @param {NonNegativeInteger} offsetE - starting index of `E`\n* @returns {integer} status code\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );\n* var E = new Float64Array( [ 1.0, 2.0 ] );\n*\n* dpttrf( 3, D, 1, 0, E, 1, 0 );\n* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]\n* // E => <Float64Array>[ 0.25, ~0.4210 ]\n*/\nfunction dpttrf( N, D, strideD, offsetD, E, strideE, offsetE ) {\n\tvar id;\n\tvar ie;\n\tvar v;\n\tvar i;\n\n\tif ( N === 0 ) {\n\t\treturn 0;\n\t}\n\tie = offsetE;\n\tid = offsetD;\n\n\t// Compute the `L * D * L^T` factorization of `A`...\n\tfor ( i = 0; i < N-1; i++ ) {\n\t\t// If `D[k] <= 0`, then the matrix is not positive definite...\n\t\tif ( D[ id ] <= 0.0 ) {\n\t\t\treturn i+1;\n\t\t}\n\t\t// Solve for E[k] and D[k+1]...\n\t\tv = E[ ie ];\n\t\tE[ ie ] = v / D[ id ];\n\n\t\tid += strideD;\n\t\tD[ id ] -= E[ ie ] * v;\n\n\t\tie += strideE;\n\t}\n\t// Check `D[k]` for positive definiteness...\n\tif ( D[ id ] <= 0.0 ) {\n\t\treturn N;\n\t}\n\treturn 0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dpttrf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Computes the `L * D * L^T` factorization of a real symmetric positive definite tridiagonal matrix `A`.\n*\n* @param {NonNegativeInteger} N - order of matrix `A`\n* @param {Float64Array} D - the `N` diagonal elements of `A`\n* @param {Float64Array} E - the `N-1` subdiagonal elements of `A`\n* @throws {RangeError} first argument must be a nonnegative integer\n* @returns {integer} status code\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );\n* var E = new Float64Array( [ 1.0, 2.0 ] );\n*\n* dpttrf( 3, D, E );\n* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]\n* // E => <Float64Array>[ 0.25, ~0.4210 ]\n*/\nfunction dpttrf( N, D, E ) {\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\treturn base( N, D, 1, 0, E, 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dpttrf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Computes the `L * D * L^T` factorization of a real symmetric positive definite tridiagonal matrix `A` using alternative indexing semantics.\n*\n* @param {NonNegativeInteger} N - order of matrix `A`\n* @param {Float64Array} D - the `N` diagonal elements of `A`\n* @param {integer} strideD - stride length for `D`\n* @param {NonNegativeInteger} offsetD - starting index of `D`\n* @param {Float64Array} E - the `N-1` subdiagonal elements of `A`\n* @param {integer} strideE - stride length for `E`\n* @param {NonNegativeInteger} offsetE - starting index of `E`\n* @throws {RangeError} first argument must be a nonnegative integer\n* @returns {integer} status code\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );\n* var E = new Float64Array( [ 1.0, 2.0 ] );\n*\n* dpttrf( 3, D, 1, 0, E, 1, 0 );\n* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]\n* // E => <Float64Array>[ 0.25, ~0.4210 ]\n*/\nfunction dpttrf( N, D, strideD, offsetD, E, strideE, offsetE ) {\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\treturn base( N, D, strideD, offsetD, E, strideE, offsetE );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dpttrf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dpttrf = require( './dpttrf.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dpttrf, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dpttrf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK routine to compute the `L * D * L^T` factorization of a real symmetric positive definite tridiagonal matrix `A`.\n*\n* @module @stdlib/lapack-base-dpttrf\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dpttrf = require( '@stdlib/lapack-base-dpttrf' );\n*\n* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );\n* var E = new Float64Array( [ 1.0, 2.0 ] );\n*\n* dpttrf( 3, D, E );\n* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]\n* // E => <Float64Array>[ 0.25, ~0.4210 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dpttrf = require( '@stdlib/lapack-base-dpttrf' );\n*\n* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );\n* var E = new Float64Array( [ 1.0, 2.0 ] );\n*\n* dpttrf.ndarray( 3, D, 1, 0, E, 1, 0 );\n* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]\n* // E => <Float64Array>[ 0.25, ~0.4210 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dpttrf;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdpttrf = main;\n} else {\n\tdpttrf = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dpttrf;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA6CA,SAASC,EAAQC,EAAGC,EAAGC,EAASC,EAASC,EAAGC,EAASC,EAAU,CAC9D,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKV,IAAM,EACV,MAAO,GAMR,IAJAQ,EAAKF,EACLC,EAAKJ,EAGCO,EAAI,EAAGA,EAAIV,EAAE,EAAGU,IAAM,CAE3B,GAAKT,EAAGM,CAAG,GAAK,EACf,OAAOG,EAAE,EAGVD,EAAIL,EAAGI,CAAG,EACVJ,EAAGI,CAAG,EAAIC,EAAIR,EAAGM,CAAG,EAEpBA,GAAML,EACND,EAAGM,CAAG,GAAKH,EAAGI,CAAG,EAAIC,EAErBD,GAAMH,CACP,CAEA,OAAKJ,EAAGM,CAAG,GAAK,EACRP,EAED,CACR,CAKAF,EAAO,QAAUC,IClFjB,IAAAY,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,uBAAwB,EAC1CC,EAAO,IAwBX,SAASC,EAAQC,EAAGC,EAAGC,EAAI,CAC1B,GAAKF,EAAI,EACR,MAAM,IAAI,WAAYH,EAAQ,+EAAgFG,CAAE,CAAE,EAEnH,OAAOF,EAAME,EAAGC,EAAG,EAAG,EAAGC,EAAG,EAAG,CAAE,CAClC,CAKAN,EAAO,QAAUG,ICzDjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,uBAAwB,EAC1CC,EAAO,IA4BX,SAASC,EAAQC,EAAGC,EAAGC,EAASC,EAASC,EAAGC,EAASC,EAAU,CAC9D,GAAKN,EAAI,EACR,MAAM,IAAI,WAAYH,EAAQ,+EAAgFG,CAAE,CAAE,EAEnH,OAAOF,EAAME,EAAGC,EAAGC,EAASC,EAASC,EAAGC,EAASC,CAAQ,CAC1D,CAKAV,EAAO,QAAUG,IC7DjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAS,IACTC,EAAU,IAKdF,EAAaC,EAAQ,UAAWC,CAAQ,EAKxCH,EAAO,QAAUE,ICgBjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAASD,EAETC,EAASC,EAMV,OAAO,QAAUD",
  "names": ["require_base", "__commonJSMin", "exports", "module", "dpttrf", "N", "D", "strideD", "offsetD", "E", "strideE", "offsetE", "id", "ie", "v", "i", "require_dpttrf", "__commonJSMin", "exports", "module", "format", "base", "dpttrf", "N", "D", "E", "require_ndarray", "__commonJSMin", "exports", "module", "format", "base", "dpttrf", "N", "D", "strideD", "offsetD", "E", "strideE", "offsetE", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dpttrf", "ndarray", "join", "tryRequire", "isError", "main", "dpttrf", "tmp"]
}
